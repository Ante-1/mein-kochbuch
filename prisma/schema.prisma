// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql" // NOTE: sqlite does not work with NextAuth.js
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Recipe {
    id           String             @id @default(cuid())
    name         String?
    instructions String?
    createdAt    DateTime           @default(now())
    image        String?
    ingredients  ingredientAmount[]
}

// beim formular für die zutaten soll es eine auto-verfollständigung für bereits
// existierende Zutaten geben, man hat aber auch die Möglichkeit selber eine neue
// anzulegen
model Ingredient {
    id               String             @id @default(cuid())
    name             String
    ingredientAmount ingredientAmount[]
}

model ingredientAmount {
    id           String      @id @default(cuid())
    ingredientId String
    amount       String
    Recipe       Recipe?     @relation(fields: [recipeId], references: [id])
    recipeId     String?
    Ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
    ingredienId  String?
}

// model Example {
//     id String @id @default(cuid())
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?
//     access_token      String?
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
